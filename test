import { useState, useEffect } from 'react';
import { Grid, Typography, Button } from '@material-ui/core';
import { withStyles } from '@material-ui/styles';
import * as XLSX from 'xlsx';
import { sendUpdateToAPI } from "../../../../service/contract-service/contract.service";
import observableHandlerService from "../../../../service/observable-handler/observable-handler.service";
import { Warning } from "@material-ui/icons";
import {
  getUserRole,
  switchCaseOrganization,
} from "../../../../utils/general.utils";
import { CircularProgress} from "@material-ui/core";


/* istanbul ignore next */
const styles = {
    regularFont: {
        fontFamily: 'UHCSans-Regular'
    }
};

function BulkUpdateComponent({ classes, ContractBoardState, setContractBoardState }) {

  const [organizationName, setOrganizationName] = useState("");
  const [notificationMessage, setNotificationMessage] = useState(null);
  const [clmDeals, setClmDeals] = useState([]);
  // display filename when success
  const [fileName, setFileName] = useState("");
  // enable submit only when file is uploaded
  const [disableSubmit, setDisableSubmit] = useState(true);
  // reset filename on submit
  const [fileReset, setFileReset] = useState(false);
  // submission in progress
  const [submissionInProgress, setSubmissionInProgress] = useState(false);

  useEffect(() => {
    const userRole = getUserRole();

    if (
      userRole &&
      userRole[0] &&
      userRole[0] !== "CLM_ACR_PROD_ADMIN" &&
      userRole[0] !== "CLM_ACR_PROD_OPS" &&
      userRole[0] !== "CLM_ACR_NONPROD_ADMIN" &&
      userRole[0] !== "CLM_ACR_NONPROD_OPS"
    ) {
      setOrganizationName(switchCaseOrganization(userRole[0]));
    }
  }, []);

  const uploadFileHandler = (e) => {
    // e.preventDefault();
    const file = e.target.files[0];
    const reader = new FileReader();
    reader.onload = function (e) {
        const readedData = XLSX.read(e.target.result, {type: 'binary'});
        const ws = readedData.Sheets[readedData.SheetNames[0]];
  
        /* Convert array to json*/
        setClmDeals(XLSX.utils.sheet_to_json(ws, {header: ["legacyContractId", "clmDealId", "clmDealStatus"]}));
        setDisableSubmit(false);
    };
    if (file) {
      reader.readAsBinaryString(file);
      setFileName(file?.name);
    }
  };

  const onSubmit = (e) => {
    setSubmissionInProgress(true);
    e.preventDefault();
    // console.log(fileName)
    clmDeals.shift();
    if (clmDeals.length > 0) {
      const clmDealUpdateInfo = sendUpdateToAPI(
        clmDeals,
        organizationName
      ).subscribe({
        next: (successResponse) =>
        processUpdateByDataSuccessResponse(
            successResponse,
            clmDealUpdateInfo
          ),
        error: (errorResponse) =>
        processUpdateByDataErrorResponse(errorResponse, clmDealUpdateInfo),
      });
    } else {
      observableHandlerService.broadcastAlert({
        message: "Please upload a file with records.",
        messageType: "error",
      });
    }
    setDisableSubmit(true);
    setFileReset(true);
  }

  const processUpdateByDataSuccessResponse = (
    succResponse,
    updateBySubscription
  ) => {
    clearSubscription(updateBySubscription);
    if (succResponse && succResponse.data) {
      setNotificationMessage({
        message: "Bulk Add Request Submitted Successfully for :- " + fileName,
        messageType: "success",
      })
    } else {
      // request went through but error thrown from server
      processUpdateByDataErrorResponse(succResponse, updateBySubscription);
    }
    setSubmissionInProgress(false);
  };

  const processUpdateByDataErrorResponse = (
    errResponse,
    updateBySubscription
  ) => {
    console.log(errResponse)
    clearSubscription(updateBySubscription);
    const message = errResponse?.response?.data?.message
      ? errResponse.response.data.message
      : "Error while Calling Update Api, please try again later!";
    const errorInfo = {
      message: "The contract update has failed: " + message,
      messageType: "error",
    };
    if(errorInfo?.message?.toLowerCase()?.includes("doc id was not found")) {
        setNotificationMessage(errorInfo);
      } else {
    observableHandlerService.broadcastAlert(errorInfo);
  }
  setSubmissionInProgress(false);
  };

  const clearSubscription = (subscription) => {
    if (subscription) {
      subscription.unsubscribe();
    }
  };

  return (
    <section className={classes.root}>
      <Grid container spacing={2} style={{ marginRight: "0.2rem" }}>
        <form onSubmit={onSubmit}>
          <Grid item xs={12}>
              <Typography variant="h4" className={classes.regularFont} style={{ marginBottom: "1.6rem" }}>
                  Bulk Add CLM Deal Information
              </Typography>
          </Grid>
          <Grid item xs={12}>
            <div className="uploadFile">
                <h1 data-testid="upload-file">Upload Input File (Supported types :- <span className="green-color">.xlsx, .xls, .csv</span>) :</h1>
                <div>
                  <input
                    onChange={uploadFileHandler}
                    id="file"
                    type="file"
                    accept=".xlsx, .xls, .csv"
                    data-testid="file-input"
                    key={fileReset}
                    // style={{display: submissionInProgress ? 'none': 'block'}}
                  />
                </div>
                {fileName && <div data-testid="file-name">{fileName}</div>}
            </div>
          </Grid>
          <Grid
            className={classes.marginTop}
            style={{ marginTop: "3rem" }}
            data-testid="submission-status"
            >
              <Button
                size="medium"
                type="submit"
                variant="outlined"
                color="primary"
                disabled={disableSubmit}
              >
                Submit
                {submissionInProgress && <CircularProgress size={24} color="primary"/>}
              </Button>
            </Grid>
          { notificationMessage &&
          <Grid container spacing={2} style={{ marginRight: "0.2rem" }}>
            <Grid item xs={12}>
              <div className={classes.searchErrorMsg}>
                  { notificationMessage?.messageType === 'error' && 
                  <div className={`${classes.displayInlineBlk} red-color`}>
                    <Warning />
                  </div>}
                  <div
                    className={`${classes.displayInlineBlk} ${notificationMessage?.messageType === 'error' ?  `red-color ${classes.noDataAvaiText}` : 'green-color' }`}
                    >{notificationMessage?.message}
                  </div>
                </div>
            </Grid>
          </Grid>
          }
        </form>
      </Grid>
    </section>
  );
};

export default withStyles(styles)(BulkUpdateComponent);

import React from 'react';  
import { render, screen, fireEvent, waitFor  } from '@testing-library/react';  
import '@testing-library/jest-dom/extend-expect';
import BulkUpdateComponent from './update.component';  
import { act } from 'react-dom/test-utils';
import * as contractService from '../../../../service/contract-service/contract.service';
  
describe('BulkUpdateComponent', () => {  
  it('renders the component', () => {  
    render(<BulkUpdateComponent />);  
    expect(screen.getByText(/Bulk Add CLM Deal Information/i)).toBeInTheDocument();  
  });  
  
  it('disables submit button initially', () => {  
    render(<BulkUpdateComponent />);  
    const submitButton = screen.getByRole('button', { name: /Submit/i });  
    expect(submitButton).toBeDisabled();  
  });  
  
  it('enables submit button after file upload', async() => {  
    await act(async() => {
        render(<BulkUpdateComponent />);  
        const fileInput = screen.getByTestId('file-input'); 
    const submitButton = screen.getByRole('button', { name: /Submit/i });  
  
    fireEvent.change(fileInput, { target: { files: [new File([''], 'test.xlsx')] } });  
    await waitFor(() => {  
        expect(submitButton).toBeEnabled();  
      }); 
    })
    
  });

  it('displays success message after successful submission', async() => 
    await act(async () => {
    
      render(<BulkUpdateComponent />);  
      const fileInput = screen.getByTestId('file-input');  
      const submitButton = screen.getByRole('button', { name: /Submit/i });  
    
      fireEvent.change(fileInput, { target: { files: [new File([''], 'test.xlsx')] } });  
      await waitFor(() => {  
          expect(submitButton).toBeEnabled();  
        });
      fireEvent.click(submitButton);  

      // screen.getByTestId('file-input').files = [new File([''], 'test.xlsx')];
    // screen.getByRole('button', { name: /Submit/i }).click(); 
    
      // Assert that the success message is displayed 
      // await waitFor(() => { 
      //   const successMessage = screen.getByText(/Bulk Add Request Submitted Successfully/i); 
      //   expect(successMessage).toBeInTheDocument();
      // }, { timeout: 4000});

      // Assert that the success message is displayed  
    // const successMessage = screen.queryByText(  
    //   /Bulk Add Request Submitted Successfully/i 
    // );  
    // expect(successMessage).toBeInTheDocument();

      // Assert that the submission in progress flag is reset  
    const submissionInProgressElement = screen.getByTestId('submission-status');  
    expect(submissionInProgressElement).toHaveTextContent('Submit'); 
    })  
  );

  
  it('displays an error message for specific error response', async () => {
    const errorMessage = 'Error while Calling Update Api, please try again later!';
  
    // Mock the sendUpdateToAPI function to return an error response
    jest.spyOn(contractService, 'sendUpdateToAPI').mockRejectedValueOnce({ response: { data: { message: errorMessage } } });
  
    render(<BulkUpdateComponent />);
  
    const fileInput = screen.getByTestId('file-input');
  
    fireEvent.change(fileInput, { target: { files: [new File([''], 'test.xlsx')] } });
  
    const submitButton = screen.getByRole('button', { name: /Submit/i });
  
    fireEvent.click(submitButton);
  
    await waitFor(() => {
      const errorElement = screen.getByText(errorMessage);
      expect(errorElement).toBeInTheDocument();
    });
  });
  

//   // Mock the dependencies
// jest.mock('../../../../service/contract-service/contract.service', () => ({
//   sendUpdateToAPI: jest.fn(),
// }));

// jest.mock('../../../../service/observable-handler/observable-handler.service', () => ({
//   broadcastAlert: jest.fn(),
// }));

//   it('submits the form and displays success message', async() => {
//     const clmDeals = [  
//       {  
//         legacyContractId: 'contract1',  
//         clmDealId: 'deal1',  
//         clmDealStatus: 'status1'  
//       },  
//       {  
//         legacyContractId: 'contract2',  
//         clmDealId: 'deal2',  
//         clmDealStatus: 'status2'  
//       }  
//     ];  

//     // Mock the necessary dependencies
//     const sendUpdateToAPI = require('../../../../service/contract-service/contract.service').sendUpdateToAPI;
//     const observableHandlerService = require('../../../../service/observable-handler/observable-handler.service');
  
//     // Create a mock subscription object
//     const mockSubscription = {
//       unsubscribe: jest.fn(),
//     };
  
//     // Mock the sendUpdateToAPI function to return a mock subscription
//     sendUpdateToAPI.mockReturnValue(mockSubscription);
  
//     render(<BulkUpdateComponent />);
  
//     // Assert that the submit button is rendered
//     const submitButton = screen.getByRole('button', { name: /submit/i });
//     expect(submitButton).toBeInTheDocument();
  
//     // Simulate file upload event
//     const fileInput = screen.getByTestId('file-input');
//     fireEvent.change(fileInput, { target: { files: [new File([''], 'test.xlsx')] } });
  
//     // Assert that the file name is updated
//     const fileName = screen.getByTestId('file-name');
//     expect(fileName).toHaveTextContent('test.xlsx');
  
//     // Assert that the submit button is enabled
//     await waitFor(() => {
//     expect(submitButton).toBeEnabled();
//     });
  
//     // Simulate form submission event
//     fireEvent.click(submitButton);
  
//     // Assert that the submission in progress flag is set
//     const submissionInProgressElement = screen.getByTestId('submission-in-progress');
//     expect(submissionInProgressElement).toHaveTextContent('Submit');
  
//     // Assert that the sendUpdateToAPI function is called with the correct arguments
//     // expect(sendUpdateToAPI).toHaveBeenCalledWith(clmDeals, organizationName);
  
//     // Simulate success response
//     const successResponse = { data: {} };

//     processUpdateByDataSuccessResponse(successResponse, mockSubscription);

//     // Assert that the success message is displayed
//     const successMessage = screen.getByText(/Bulk Add Request Submitted Successfully/i);
//     expect(successMessage).toBeInTheDocument();

//     // Assert that the submission in progress flag is reset
//     expect(submissionInProgressElement).toHaveTextContent('Submission in Progress: false');

//     // Assert that the subscription is unsubscribed
//     expect(mockSubscription.unsubscribe).toHaveBeenCalledTimes(1);
  
//     // Assert that the broadcastAlert function is not called
//     expect(observableHandlerService.broadcastAlert).not.toHaveBeenCalled();
  
//     // Cleanup the mock implementation
//     processUpdateByDataSuccessResponse.mockRestore();
//   });
})  
